include_guard(GLOBAL)
include(CheckSymbolExists)

set(RUPKG_PLATFORM_WIN32 off)
set(RUPKG_PLATFORM_LINUX off)
set(RUPKG_PLATFORM_MACOS off)
set(RUPKG_PLATFORM_TIZEN off)
set(RUPKG_PLATFORM_ANDROID off)
set(RUPKG_PLATFORM_IOS off)
set(RUPKG_PLATFORM_EMSCRIPTEN off)
set(RUPKG_PLATFORM_UWP off)
set(RUPKG_PLATFORM_AVR off)

if (CMAKE_SYSTEM_NAME STREQUAL "Android")
	set(RUPKG_PLATFORM_ANDROID on)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	set(RUPKG_PLATFORM_WIN32 on)
elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
	set(RUPKG_PLATFORM_IOS on)
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set(RUPKG_PLATFORM_MACOS on)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
	set(RUPKG_PLATFORM_EMSCRIPTEN on)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Tizen")
	set(RUPKG_PLATFORM_TIZEN on)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set(RUPKG_PLATFORM_LINUX on)
elseif (CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
	set(RUPKG_PLATFORM_UWP on)
elseif (CMAKE_SYSTEM_NAME STREQUAL "AVR")
	set(RUPKG_PLATFORM_AVR on)
endif()

if (CMAKE_C_COMPILER_ID MATCHES "AppleClang")
	set(RUPKG_COMPILER_APPLECLANG on)
elseif (CMAKE_C_COMPILER_ID MATCHES "Clang")
	if (CMAKE_C_SIMULATE_ID MATCHES "MSVC")
		set(RUPKG_COMPILER_MSVC on)
	else()
		set(RUPKG_COMPILER_CLANG on)
	endif()
elseif (CMAKE_C_COMPILER_ID MATCHES "GNU")
	set(RUPKG_COMPILER_GNU on)
elseif (CMAKE_C_COMPILER_ID MATCHES "MSVC")
	set(RUPKG_COMPILER_MSVC on)
endif()

set(RUPKG_HOST_PLATFORMS windows linux macos)
set(RUPKG_FULLSUPPORT_PLATFORMS ${RUPKG_HOST_PLATFORMS} android ios uwp emscripten tizen ns)
set(RUPKG_MICRO_CONTROLLER_PLATFORMS avr pico)
set(RUPKG_ALL_PLATFORMS ${RUPKG_FULLSUPPORT_PLATFORMS} ${RUPKG_MICRO_CONTROLLER_PLATFORMS})

if(RUPKG_PLATFORM_EMSCRIPTEN)
	check_symbol_exists("__wasm32__" "" RUPKG_ARCHITECTURE_WASM32)
	check_symbol_exists("__wasm64__" "" RUPKG_ARCHITECTURE_WASM64)
elseif(RUPKG_PLATFORM_WIN32 OR RUPKG_PLATFORM_UWP)
	check_symbol_exists("_M_AMD64" "" RUPKG_ARCHITECTURE_X64)
	check_symbol_exists("_M_ARM64" "" RUPKG_ARCHITECTURE_ARM64)
	check_symbol_exists("_M_IX86" "" RUPKG_ARCHITECTURE_X86)
	check_symbol_exists("_M_ARM" "" RUPKG_ARCHITECTURE_ARM)
elseif(RUPKG_PLATFORM_AVR)
else()
	check_symbol_exists("__x86_64__" "" RUPKG_ARCHITECTURE_X64)
	check_symbol_exists("__aarch64__" "" RUPKG_ARCHITECTURE_ARM64)
	check_symbol_exists("__i386__" "" RUPKG_ARCHITECTURE_X86)
	check_symbol_exists("__arm__" "" RUPKG_ARCHITECTURE_ARM)
endif()

if (RUPKG_PLATFORM_WIN32)
	set(RUPKG_PLATFORM "windows")
elseif(RUPKG_PLATFORM_LINUX)
	set(RUPKG_PLATFORM "linux")
elseif(RUPKG_PLATFORM_MACOS)
	set(RUPKG_PLATFORM "macos")
elseif(RUPKG_PLATFORM_ANDROID)
	set(RUPKG_PLATFORM "android")
elseif(RUPKG_PLATFORM_IOS)
	set(RUPKG_PLATFORM "ios")
elseif(RUPKG_PLATFORM_EMSCRIPTEN)
	set(RUPKG_PLATFORM "emscripten")
elseif(RUPKG_PLATFORM_TIZEN)
	set(RUPKG_PLATFORM "tizen")
elseif(RUPKG_PLATFORM_UWP)
	set(RUPKG_PLATFORM "uwp")
elseif(RUPKG_PLATFORM_AVR)
	set(RUPKG_PLATFORM "avr")
else()
	message(FATAL_ERROR "Unknown architecture")
endif()

if (NOT DEFINED RUPKG_TRIPLE_PLATFORM)
	set(RUPKG_TRIPLE_PLATFORM "${RUPKG_PLATFORM}")
endif()

if (RUPKG_PLATFORM_AVR)
	set(RUPKG_ARCHITECTURE "${CMAKE_AVR_MCU}")
else()
	if(RUPKG_ARCHITECTURE_ARM64)
		set(RUPKG_ARCHITECTURE "arm64")
	elseif(RUPKG_ARCHITECTURE_X64)
		set(RUPKG_ARCHITECTURE "x64")
	elseif(RUPKG_ARCHITECTURE_X86)
		set(RUPKG_ARCHITECTURE "x86")
	elseif(RUPKG_ARCHITECTURE_ARM)
		set(RUPKG_ARCHITECTURE "arm")
	elseif(RUPKG_ARCHITECTURE_WASM32)
		set(RUPKG_ARCHITECTURE "wasm32")
	elseif(RUPKG_ARCHITECTURE_WASM64)
		set(RUPKG_ARCHITECTURE "wasm64")
	else()
		message(FATAL_ERROR "Unknown architecture")
	endif()
endif()

if (NOT DEFINED RUPKG_TRIPLE_ARCHITECTURE)
	set(RUPKG_TRIPLE_ARCHITECTURE "${RUPKG_ARCHITECTURE}")
endif()

if (RUPKG_COMPILER_APPLECLANG)
	set(RUPKG_COMPILER "appleclang")
elseif (RUPKG_COMPILER_CLANG)
	set(RUPKG_COMPILER "clang")
elseif(RUPKG_COMPILER_GNU)
	set(RUPKG_COMPILER "gcc")
elseif(RUPKG_COMPILER_MSVC)
	set(RUPKG_COMPILER "msvc")
else()
	message(FATAL_ERROR "Unknown compiler")
endif()

if (CMAKE_HOST_WIN32)
	set(RUPKG_HOST_PLATFORM "windows")
elseif (CMAKE_HOST_APPLE)
	set(RUPKG_HOST_PLATFORM "macos")
else()
	set(RUPKG_HOST_PLATFORM "linux")
endif()

set(RUPKG_TRIPLE_HOST_PLATFORM "${RUPKG_HOST_PLATFORM}")

string(TOLOWER ${CMAKE_HOST_SYSTEM_PROCESSOR} RUPKG_HOST_SYSTEM_PROCESSOR_LOWER)

option(RUPKG_ENABLE_LTO "lto" off)
if (RUPKG_ENABLE_LTO)
	cmake_policy(SET CMP0069 NEW)
	include(CheckIPOSupported)
	check_ipo_supported()
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION on)
	set(RUPKG_TRIPLE_LTO "lto")
endif()

if(CMAKE_HOST_APPLE)
	if ("${CMAKE_APPLE_SILICON_PROCESSOR}" STREQUAL "arm64")
		set(RUPKG_HOST_ARCHITECTURE "arm64")
	else()
		set(RUPKG_HOST_ARCHITECTURE "x64")
	endif()
else()
	if ("${RUPKG_HOST_SYSTEM_PROCESSOR_LOWER}" MATCHES "x86_64" OR
		"${RUPKG_HOST_SYSTEM_PROCESSOR_LOWER}" MATCHES "amd64" OR
		"${RUPKG_HOST_SYSTEM_PROCESSOR_LOWER}" MATCHES "x64")
		set(RUPKG_HOST_ARCHITECTURE "x64")
	elseif ("${RUPKG_HOST_SYSTEM_PROCESSOR_LOWER}" MATCHES "arm64")
		set(RUPKG_HOST_ARCHITECTURE "arm64")
	endif()
endif()

set(RUPKG_TRIPLE_HOST_ARCHITECTURE "${RUPKG_HOST_ARCHITECTURE}")

function(__rupkg_generate_triple)
	cmake_parse_arguments("args" "" "OUTPUT" "TOKENS" ${ARGN})
	set(result "")
	foreach(token ${args_TOKENS})
		if (NOT "${RUPKG_TRIPLE_${token}}" STREQUAL "")
			if (NOT "${result}" STREQUAL "")
				set(result "${result}-")
			endif()
			set(result "${result}${RUPKG_TRIPLE_${token}}")
		endif()
	endforeach()
	set(${args_OUTPUT} ${result} PARENT_SCOPE)
endfunction()
__rupkg_generate_triple(TOKENS PLATFORM ARCHITECTURE LTO OUTPUT RUPKG_TRIPLE)
__rupkg_generate_triple(TOKENS HOST_PLATFORM HOST_ARCHITECTURE OUTPUT RUPKG_HOST_TRIPLE)

message(STATUS "HostTriple: ${RUPKG_HOST_TRIPLE}")
message(STATUS "TargetTriple: ${RUPKG_TRIPLE}")

if (RUPKG_PLATFORM_WIN32 OR RUPKG_PLATFORM_MACOS OR RUPKG_PLATFORM_LINUX)
	set(RUPKG_PLATFORM_IS_HOST on)
else()
	set(RUPKG_PLATFORM_IS_HOST off)
endif()

if (NOT RUPKG_PLATFORM_AVR)
	if (RUPKG_COMPILER_GNU OR RUPKG_COMPILER_CLANG)
		if (NOT RUPKG_PLATFORM_EMSCRIPTEN)
			set(CMAKE_POSITION_INDEPENDENT_CODE on)
			add_compile_options(
				$<$<COMPILE_LANGUAGE:C,CXX,ASM>:-fvisibility=hidden>
				$<$<COMPILE_LANGUAGE:C,CXX,ASM>:$<$<CONFIG:Release>:-ffunction-sections>>
				$<$<COMPILE_LANGUAGE:C,CXX,ASM>:$<$<CONFIG:Release>:-fdata-sections>>)
			add_link_options(-Wl,-z,defs)
		endif()
	endif()

	if (RUPKG_COMPILER_APPLECLANG)
		set(CMAKE_POSITION_INDEPENDENT_CODE on)
		add_compile_options(
			$<$<COMPILE_LANGUAGE:C,CXX,ASM>:-fvisibility=hidden>)
	endif()

	if (RUPKG_COMPILER_MSVC)
		add_compile_definitions(
			$<$<COMPILE_LANGUAGE:CXX>:_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING>)
		add_compile_options(
			$<$<COMPILE_LANGUAGE:C,CXX>:$<$<CONFIG:Debug>:/Z7>>
			$<$<COMPILE_LANGUAGE:C,CXX>:$<$<CONFIG:Release>:/Gy>>
			$<$<COMPILE_LANGUAGE:C,CXX>:$<$<CONFIG:Release>:/Gw>>)
		if ("${CMAKE_GENERATOR}" MATCHES "Ninja")
			string(REPLACE "/Zi" "" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
			string(REPLACE "/Zi" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
		endif()
	endif()

	if (RUPKG_PLATFORM_EMSCRIPTEN)
		add_compile_options(-fexceptions)
		add_link_options(-fexceptions)
	endif()

	if (RUPKG_PLATFORM_MACOS)
		set(CMAKE_OSX_DEPLOYMENT_TARGET 11.0)
	endif()

	if (RUPKG_COMPILER_MSVC)
		set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
	elseif (RUPKG_COMPILER_GNU)
		add_compile_options(
			$<$<COMPILE_LANGUAGE:C,CXX,ASM>:-static-libstdc++>
			$<$<COMPILE_LANGUAGE:C,CXX,ASM>:-static-libgcc>)
		add_link_options(-static-libstdc++ -static-libgcc)
	elseif (RUPKG_COMPILER_CLANG)
	elseif (RUPKG_COMPILER_APPLECLANG)
	endif()
endif()

if ("${CMAKE_GENERATOR}" MATCHES "Ninja")
	set(CMAKE_CROSS_CONFIGS ${CMAKE_CONFIGURATION_TYPES})
	set(CMAKE_DEFAULT_CONFIGS all)
endif()